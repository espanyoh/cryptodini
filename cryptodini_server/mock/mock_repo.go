// Code generated by MockGen. DO NOT EDIT.
// Source: ./cryptodini_server/repo.go

// Package mock_cryptodini_server is a generated GoMock package.
package mock_cryptodini_server

import (
	models "cryptodini/models"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	reflect "reflect"
)

// MockRepoService is a mock of RepoService interface
type MockRepoService struct {
	ctrl     *gomock.Controller
	recorder *MockRepoServiceMockRecorder
}

// MockRepoServiceMockRecorder is the mock recorder for MockRepoService
type MockRepoServiceMockRecorder struct {
	mock *MockRepoService
}

// NewMockRepoService creates a new mock instance
func NewMockRepoService(ctrl *gomock.Controller) *MockRepoService {
	mock := &MockRepoService{ctrl: ctrl}
	mock.recorder = &MockRepoServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepoService) EXPECT() *MockRepoServiceMockRecorder {
	return m.recorder
}

// GetUser mocks base method
func (m *MockRepoService) GetUser(userID uuid.UUID) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", userID)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser
func (mr *MockRepoServiceMockRecorder) GetUser(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockRepoService)(nil).GetUser), userID)
}

// GetPort mocks base method
func (m *MockRepoService) GetPort(userID uuid.UUID) (*models.Portfolio, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPort", userID)
	ret0, _ := ret[0].(*models.Portfolio)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPort indicates an expected call of GetPort
func (mr *MockRepoServiceMockRecorder) GetPort(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPort", reflect.TypeOf((*MockRepoService)(nil).GetPort), userID)
}

// ExecuteOrders mocks base method
func (m *MockRepoService) ExecuteOrders(arg0 []models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteOrders", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteOrders indicates an expected call of ExecuteOrders
func (mr *MockRepoServiceMockRecorder) ExecuteOrders(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteOrders", reflect.TypeOf((*MockRepoService)(nil).ExecuteOrders), arg0)
}

// SavePort mocks base method
func (m *MockRepoService) SavePort(arg0 models.Portfolio) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePort", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SavePort indicates an expected call of SavePort
func (mr *MockRepoServiceMockRecorder) SavePort(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePort", reflect.TypeOf((*MockRepoService)(nil).SavePort), arg0)
}
